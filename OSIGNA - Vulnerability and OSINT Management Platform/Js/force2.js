
var w = 400,
    h = 300;

var color = d3.scale.category20();

var force = d3.layout.force()
    .gravity(.05)
    .distance(100)
    .charge(-100)
    .size([w, h]);

var nodes = force.nodes(),
    links = force.links();
	
var colorScale = d3.scale.category20c();

var vis = d3.select("#target-d3").append("svg:svg")
    .attr("width", w)
    .attr("height", h);

force.on("tick", function() {
  vis.selectAll("g.node")
      .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });

  vis.selectAll("line.link")
      .attr("x1", function(d) { return d.source.x; })
      .attr("y1", function(d) { return d.source.y; })
      .attr("x2", function(d) { return d.target.x; })
      .attr("y2", function(d) { return d.target.y; });
});

function restart() {
  var link = vis.selectAll("line.link")
      .data(links, function(d) { return d.source.id + "-" + d.target.id; });

  link.enter().insert("svg:line", "g.node")
      .attr("class", "link");

  link.exit().remove();

  var node = vis.selectAll("g.node")
      .data(nodes, function(d) { return d.id;});
	
  var nodeEnter = node.enter().append("svg:g")
      .attr("class", "node")
      .call(force.drag);
		
	nodeEnter.append("svg:circle")
		.attr("color_value", function(d, i) { return colorScale(i); }) // Bar fill color...
      .attr("class", "node")
      .attr("r", 5)
	  .attr("detail", function(d) { return d.ip; })
	  .attr("url", function(d) { return d.url; })
	  .attr("name", function(d) { return d.name; })
      .style("fill", function(d) { return color(d.group); })
	  .style("stroke", function(d) { return d.stroke; });
	  
  /*nodeEnter.append("svg:image")
      .attr("class", "circle")
      .attr("xlink:href", "https://d3nwyuy0nl342s.cloudfront.net/images/icons/public.png")
      .attr("x", "-8px")
      .attr("y", "-8px")
      .attr("width", "16px")
      .attr("height", "16px");
*/
  nodeEnter.append("svg:text")
      .attr("class", "nodetext")
      .attr("dx", 12)
      .attr("dy", ".35em")
      .text(function(d) { return d.url });

  node.exit().remove();
		
  force.start();
}

// Add three nodes and three links.
function step1() {
  var a = {id: "aaa", url: "www.google.com", group: 1}, b = {id: "bbb", url: "www.google.com", group: 1}, c = {id: "ccc", url: "www.google.com", group: 1};
  nodes.push(a, b, c);
  links.push({source: a, target: b}, {source: a, target: c}, {source: b, target: c});
  restart();
}

// Add node ddd.
function step3() {
  //var a = nodes[0], b = {id: "bbb"}, c = nodes[1];
  var a = nodes[0], b = nodes[1], c = nodes[2], d = {id: "ddd", url: "www.yahoo.com", group: 2};
  nodes.push(d);
  links.push({source: a, target: d});
  restart();
}

function addSingleNode() {
	n = {id: "nnn", url: "client.olfeo.com", group: 3};
	nodes.push(n);
	restart();
}

function step4() {
	nodes.splice(3, 3); // remove d
	links.pop(); // remove b-c
	restart();
}

function d3discovery() {
	console.log("discovery");
	for(i=0;i<3;i++)
	{
		setTimeout(step3, i*2000);
	}
}

function d3filter() {
	console.log("filter");
	addSingleNode();
}

restart();
setTimeout(step1, 2000);
//setTimeout(step3, 6000);
//setTimeout(step4, 8000);